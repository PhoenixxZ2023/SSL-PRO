#!/bin/sh -e
### INÍCIO DAS INFORMAÇÕES DE INICIALIZAÇÃO
# Fornece:           stunnel
# Requer-Início:     $local_fs $remote_fs
# Requer-Parada:     $local_fs $remote_fs
# Deveria-Iniciar:   $syslog
# Deveria-Parar:     $syslog
# Início-Padrão:     2 3 4 5
# Parada-Padrão:     0 1 6
# Descrição-Curta:   Inicia ou para o stunnel 5.x (Túnel TLS para daemons de rede)
# Descrição:        Inicia ou para todos os túneis de rede TLS configurados. Cada arquivo *.conf em
#                    /etc/stunnel5/ iniciará um processo stunnel separado. A lista de arquivos
#                    pode ser substituída em /etc/default/stunnel5 e o mesmo arquivo pode ser usado
#                    para desativar completamente *todos* os túneis.
### FIM DAS INFORMAÇÕES DE INICIALIZAÇÃO

. /lib/lsb/init-functions

DEFAULTPIDFILE="/var/run/stunnel.pid"
DAEMON="/usr/local/lamvpn/stunnel5"
NOME="stunnel5"
DESC="Serviço Stunnel5"
OPCOES=""

get_opt() {
  sed -e "s;^[[:space:]]*;;" -e "s;[[:space:]]*$;;" \
    -e "s;[[:space:]]*=[[:space:]]*;=;" "$1" |
    grep -i "^$2=" | sed -e "s;^[^=]*=;;"
}

get_pidfile() {
  local arquivo=$1
  if [ -f "$arquivo" ]; then
    CHROOT=$(get_opt "$arquivo" chroot)
    PIDFILE=$(get_opt "$arquivo" pid)
    if [ -z "$PIDFILE" ]; then
      PIDFILE=$DEFAULTPIDFILE
    fi
    echo "$CHROOT/$PIDFILE"
  fi
}

startdaemons() {
  local res arquivo args pidfile aviso status

  if [ ! -d /var/run/stunnel ]; then
    rm -rf /var/run/stunnel
    install -d -o stunnel -g stunnel /var/run/stunnel
  fi
  if [ -n "$RLIMITS" ]; then
    ulimit $RLIMITS
  fi
  res=0
  for arquivo in $FILES; do
    if [ -f "$arquivo" ]; then
      echo -n " $arquivo: "
      args="$arquivo $OPCOES"
      pidfile=$(get_pidfile "$arquivo")
      if egrep -qe '^pid[[:space:]]*=' "$arquivo"; then
        aviso=''
      else
        aviso=' (nenhum pid=pidfile especificado!)'
      fi
      status=0
      start_daemon -p "$pidfile" "$DAEMON" $args || status=$?
      if [ "$status" -eq 0 ]; then
        echo -n "iniciado$aviso"
      else
        echo "falhou$aviso"
        echo "Você deve verificar se especificou pid= no seu arquivo de configuração"
        res=1
      fi
    fi
  done
  echo ''
  return "$res"
}

killdaemons() {
  local sig arquivo pidfile status

  sig=$1
  res=0
  for arquivo in $FILES; do
    echo -n " $arquivo: "
    pidfile=$(get_pidfile "$arquivo")
    if [ ! -e "$pidfile" ]; then
      echo -n "nenhum arquivo pid"
    else
      status=0
      killproc -p "$pidfile" "$DAEMON" ${sig:+"$sig"} || status=$?
      if [ "$status" -eq 0 ]; then
        echo -n 'parado'
      else
        echo -n 'falhou'
        res=1
      fi
    fi
  done
  echo ''
  return "$res"
}

querydaemons() {
  local res arquivo pidfile status

  res=0
  for arquivo in $FILES; do
    echo -n " $arquivo: "
    pidfile=$(get_pidfile "$arquivo")
    if [ ! -e "$pidfile" ]; then
      echo -n 'nenhum arquivo pid'
      res=1
    else
      status=0
      pidofproc -p "$pidfile" "$DAEMON" >/dev/null || status="$?"
      if [ "$status" = 0 ]; then
        echo -n 'executando'
      elif [ "$status" = 4 ]; then
        echo "não é possível acessar o arquivo pid $pidfile"
        res=1
      else
        echo -n 'parado'
        res=1
      fi
    fi
  done
  echo ''
  exit "$res"
}

restartrunningdaemons() {
  local res arquivo pidfile status args

  res=0
  for arquivo in $FILES; do
    echo -n " $arquivo: "
    pidfile=$(get_pidfile "$arquivo")
    if [ ! -e "$pidfile" ]; then
      echo -n 'nenhum arquivo pid'
    else
      status=0
      pidofproc -p "$pidfile" "$DAEMON" >/dev/null || status="$?"
      if [ "$status" = 0 ]; then
        echo -n 'parando'
        killproc -p "$pidfile" "$DAEMON" "$sig" || status="$?"
        if [ "$status" -eq 0 ]; then
          echo -n ' iniciando'
          args="$arquivo $OPCOES"
          start_daemon -p "$pidfile" "$DAEMON" $args || status="$?"
          if [ "$status" -eq 0 ]; then
            echo -n ' iniciado'
          else
            echo ' falhou'
            res=1
          fi
        else
          echo -n ' falhou'
          res=1
        fi
      elif [ "$status" = 4 ]; then
        echo "não é possível acessar o arquivo pid $pidfile"
      else
        echo -n 'parado'
      fi
    fi
  done
  echo ''
  exit "$res"
}

if [ "x$OPCOES" != "x" ]; then
  OPCOES="-- $OPCOES"
fi

# Se o usuário quiser gerenciar um único túnel, o nome do arquivo de configuração
# está em $2. Caso contrário, respeite a configuração em /etc/default/stunnel5.
# Se não houver configuração lá, use /etc/stunnel5/*.conf.
if [ -n "${2:-}" ]; then
  if [ -e "/etc/stunnel5/stunnel5.conf" ]; then
    FILES="/etc/stunnel5/stunnel5.conf"
  fi
else
  if [ -z "$FILES" ]; then
    FILES="/etc/stunnel5/*.conf"
  fi
fi

[ -x "$DAEMON" ] || exit 0

set -e

res=0
case "$1" in
  start)
    echo -n "Iniciando $DESC:"
    startdaemons
    res=$?
    ;;
  stop)
    echo -n "Parando $DESC:"
    killdaemons
    res=$?
    ;;
  reopen-logs)
    echo -n "Reabrindo arquivos de log $DESC:"
    killdaemons USR1
    res=$?
    ;;
  force-reload|reload)
    echo -n "Recarregando configuração $DESC:"
    killdaemons HUP
    res=$?
    ;;
  restart)
    echo -n "Reiniciando $DESC:"
    killdaemons && startdaemons
    res=$?
    ;;
  try-restart)
    echo -n "Reiniciando $DESC se estiver em execução:"
    restartrunningdaemons
    res=$?
    ;;
  status)
    echo -n "Status do $DESC:"
    querydaemons
    res=$?
    ;;
  *)
    N=/etc/init.d/$NOME
    echo "Uso: $N {start|stop|status|reload|reopen-logs|restart|try-restart} [<instância do stunnel>]" >&2
    res=1
    ;;
esac

exit "$res"
